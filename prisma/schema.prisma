generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  displayName   String?
  createdAt     DateTime        @default(now())
  dailyProgress DailyProgress[]
  habits        Habit[]
  habitChecks   HabitCheck[]
  health        Health[]
  stats         Stats[]
}

model Habit {
  id          String         @id @default(cuid())
  userId      String
  name        String
  frequency   HabitFrequency
  targetType  TargetType
  targetValue Int
  active      Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  color       String         @default("#3b82f6")
  customDays  Int[]          @default([])
  emoji       String         @default("üìù")
  startDate   String         @default("")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitChecks HabitCheck[]

  @@unique([userId, name])
  @@index([userId])
  @@index([active])
}

model DailyProgress {
  id         String   @id @default(cuid())
  userId     String
  date       DateTime @db.Date
  habitsData Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model Stats {
  id           String   @id @default(cuid())
  userId       String
  date         String
  totalHabits  Int      @default(0)
  sevenDayRate Float    @default(0)
  bestStreak   Int      @default(0)
  bestDay      Json?
  worstDay     Json?
  lastUpdated  DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([sevenDayRate])
  @@index([bestStreak])
}

model HabitCheck {
  id        String   @id @default(cuid())
  habitId   String
  userId    String
  date      String
  completed Boolean
  timestamp String
  createdAt DateTime @default(now())
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([userId])
  @@index([date])
  @@index([completed])
}

model Health {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @db.Date
  weight          Float?
  height          Float?
  bmi             Float?
  steps           Int?
  distance        Int?
  caloriesBurned  Int?
  activeEnergy    Int?
  restingEnergy   Int?
  bloodPressure   String?
  heartRate       Int?
  bloodOxygen     Float?
  bodyTemperature Float?
  sleepHours      Float?
  sleepQuality    String?
  exerciseMinutes Int?
  standHours      Int?
  waterIntake     Int?
  notes           String?
  source          String   @default("apple_health")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([source])
}

enum HabitFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum TargetType {
  COUNT
  MINUTES
  BOOLEAN
}
